// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: picture/v1/picture.proto

package picturev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jj-style/eventpix/backend/gen/picture/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PictureServiceName is the fully-qualified name of the PictureService service.
	PictureServiceName = "picture.v1.PictureService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PictureServiceCreateEventProcedure is the fully-qualified name of the PictureService's
	// CreateEvent RPC.
	PictureServiceCreateEventProcedure = "/picture.v1.PictureService/CreateEvent"
	// PictureServiceGetEventsProcedure is the fully-qualified name of the PictureService's GetEvents
	// RPC.
	PictureServiceGetEventsProcedure = "/picture.v1.PictureService/GetEvents"
	// PictureServiceGetEventProcedure is the fully-qualified name of the PictureService's GetEvent RPC.
	PictureServiceGetEventProcedure = "/picture.v1.PictureService/GetEvent"
	// PictureServiceUploadProcedure is the fully-qualified name of the PictureService's Upload RPC.
	PictureServiceUploadProcedure = "/picture.v1.PictureService/Upload"
	// PictureServiceGetThumbnailsProcedure is the fully-qualified name of the PictureService's
	// GetThumbnails RPC.
	PictureServiceGetThumbnailsProcedure = "/picture.v1.PictureService/GetThumbnails"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pictureServiceServiceDescriptor             = v1.File_picture_v1_picture_proto.Services().ByName("PictureService")
	pictureServiceCreateEventMethodDescriptor   = pictureServiceServiceDescriptor.Methods().ByName("CreateEvent")
	pictureServiceGetEventsMethodDescriptor     = pictureServiceServiceDescriptor.Methods().ByName("GetEvents")
	pictureServiceGetEventMethodDescriptor      = pictureServiceServiceDescriptor.Methods().ByName("GetEvent")
	pictureServiceUploadMethodDescriptor        = pictureServiceServiceDescriptor.Methods().ByName("Upload")
	pictureServiceGetThumbnailsMethodDescriptor = pictureServiceServiceDescriptor.Methods().ByName("GetThumbnails")
)

// PictureServiceClient is a client for the picture.v1.PictureService service.
type PictureServiceClient interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvents(context.Context, *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
	GetThumbnails(context.Context, *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error)
}

// NewPictureServiceClient constructs a client for the picture.v1.PictureService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPictureServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PictureServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pictureServiceClient{
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+PictureServiceCreateEventProcedure,
			connect.WithSchema(pictureServiceCreateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEvents: connect.NewClient[v1.GetEventsRequest, v1.GetEventsResponse](
			httpClient,
			baseURL+PictureServiceGetEventsProcedure,
			connect.WithSchema(pictureServiceGetEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEvent: connect.NewClient[v1.GetEventRequest, v1.GetEventResponse](
			httpClient,
			baseURL+PictureServiceGetEventProcedure,
			connect.WithSchema(pictureServiceGetEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upload: connect.NewClient[v1.UploadRequest, v1.UploadResponse](
			httpClient,
			baseURL+PictureServiceUploadProcedure,
			connect.WithSchema(pictureServiceUploadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getThumbnails: connect.NewClient[v1.GetThumbnailsRequest, v1.GetThumbnailsResponse](
			httpClient,
			baseURL+PictureServiceGetThumbnailsProcedure,
			connect.WithSchema(pictureServiceGetThumbnailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pictureServiceClient implements PictureServiceClient.
type pictureServiceClient struct {
	createEvent   *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	getEvents     *connect.Client[v1.GetEventsRequest, v1.GetEventsResponse]
	getEvent      *connect.Client[v1.GetEventRequest, v1.GetEventResponse]
	upload        *connect.Client[v1.UploadRequest, v1.UploadResponse]
	getThumbnails *connect.Client[v1.GetThumbnailsRequest, v1.GetThumbnailsResponse]
}

// CreateEvent calls picture.v1.PictureService.CreateEvent.
func (c *pictureServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// GetEvents calls picture.v1.PictureService.GetEvents.
func (c *pictureServiceClient) GetEvents(ctx context.Context, req *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error) {
	return c.getEvents.CallUnary(ctx, req)
}

// GetEvent calls picture.v1.PictureService.GetEvent.
func (c *pictureServiceClient) GetEvent(ctx context.Context, req *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return c.getEvent.CallUnary(ctx, req)
}

// Upload calls picture.v1.PictureService.Upload.
func (c *pictureServiceClient) Upload(ctx context.Context, req *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// GetThumbnails calls picture.v1.PictureService.GetThumbnails.
func (c *pictureServiceClient) GetThumbnails(ctx context.Context, req *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error) {
	return c.getThumbnails.CallUnary(ctx, req)
}

// PictureServiceHandler is an implementation of the picture.v1.PictureService service.
type PictureServiceHandler interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvents(context.Context, *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
	GetThumbnails(context.Context, *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error)
}

// NewPictureServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPictureServiceHandler(svc PictureServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pictureServiceCreateEventHandler := connect.NewUnaryHandler(
		PictureServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(pictureServiceCreateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pictureServiceGetEventsHandler := connect.NewUnaryHandler(
		PictureServiceGetEventsProcedure,
		svc.GetEvents,
		connect.WithSchema(pictureServiceGetEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pictureServiceGetEventHandler := connect.NewUnaryHandler(
		PictureServiceGetEventProcedure,
		svc.GetEvent,
		connect.WithSchema(pictureServiceGetEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pictureServiceUploadHandler := connect.NewUnaryHandler(
		PictureServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(pictureServiceUploadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pictureServiceGetThumbnailsHandler := connect.NewUnaryHandler(
		PictureServiceGetThumbnailsProcedure,
		svc.GetThumbnails,
		connect.WithSchema(pictureServiceGetThumbnailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/picture.v1.PictureService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PictureServiceCreateEventProcedure:
			pictureServiceCreateEventHandler.ServeHTTP(w, r)
		case PictureServiceGetEventsProcedure:
			pictureServiceGetEventsHandler.ServeHTTP(w, r)
		case PictureServiceGetEventProcedure:
			pictureServiceGetEventHandler.ServeHTTP(w, r)
		case PictureServiceUploadProcedure:
			pictureServiceUploadHandler.ServeHTTP(w, r)
		case PictureServiceGetThumbnailsProcedure:
			pictureServiceGetThumbnailsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPictureServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPictureServiceHandler struct{}

func (UnimplementedPictureServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("picture.v1.PictureService.CreateEvent is not implemented"))
}

func (UnimplementedPictureServiceHandler) GetEvents(context.Context, *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("picture.v1.PictureService.GetEvents is not implemented"))
}

func (UnimplementedPictureServiceHandler) GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("picture.v1.PictureService.GetEvent is not implemented"))
}

func (UnimplementedPictureServiceHandler) Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("picture.v1.PictureService.Upload is not implemented"))
}

func (UnimplementedPictureServiceHandler) GetThumbnails(context.Context, *connect.Request[v1.GetThumbnailsRequest]) (*connect.Response[v1.GetThumbnailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("picture.v1.PictureService.GetThumbnails is not implemented"))
}
