// Code generated by mockery v2.47.0. DO NOT EDIT.

package db

import (
	context "context"

	db "github.com/jj-style/eventpix/backend/internal/data/db"
	mock "github.com/stretchr/testify/mock"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// AddFileInfo provides a mock function with given fields: _a0, _a1
func (_m *MockDB) AddFileInfo(_a0 context.Context, _a1 *db.FileInfo) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddFileInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.FileInfo) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_AddFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFileInfo'
type MockDB_AddFileInfo_Call struct {
	*mock.Call
}

// AddFileInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *db.FileInfo
func (_e *MockDB_Expecter) AddFileInfo(_a0 interface{}, _a1 interface{}) *MockDB_AddFileInfo_Call {
	return &MockDB_AddFileInfo_Call{Call: _e.mock.On("AddFileInfo", _a0, _a1)}
}

func (_c *MockDB_AddFileInfo_Call) Run(run func(_a0 context.Context, _a1 *db.FileInfo)) *MockDB_AddFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*db.FileInfo))
	})
	return _c
}

func (_c *MockDB_AddFileInfo_Call) Return(_a0 error) *MockDB_AddFileInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_AddFileInfo_Call) RunAndReturn(run func(context.Context, *db.FileInfo) error) *MockDB_AddFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// AddThumbnailInfo provides a mock function with given fields: _a0, _a1
func (_m *MockDB) AddThumbnailInfo(_a0 context.Context, _a1 *db.ThumbnailInfo) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddThumbnailInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.ThumbnailInfo) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_AddThumbnailInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddThumbnailInfo'
type MockDB_AddThumbnailInfo_Call struct {
	*mock.Call
}

// AddThumbnailInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *db.ThumbnailInfo
func (_e *MockDB_Expecter) AddThumbnailInfo(_a0 interface{}, _a1 interface{}) *MockDB_AddThumbnailInfo_Call {
	return &MockDB_AddThumbnailInfo_Call{Call: _e.mock.On("AddThumbnailInfo", _a0, _a1)}
}

func (_c *MockDB_AddThumbnailInfo_Call) Run(run func(_a0 context.Context, _a1 *db.ThumbnailInfo)) *MockDB_AddThumbnailInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*db.ThumbnailInfo))
	})
	return _c
}

func (_c *MockDB_AddThumbnailInfo_Call) Return(_a0 error) *MockDB_AddThumbnailInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_AddThumbnailInfo_Call) RunAndReturn(run func(context.Context, *db.ThumbnailInfo) error) *MockDB_AddThumbnailInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvent provides a mock function with given fields: _a0, _a1
func (_m *MockDB) CreateEvent(_a0 context.Context, _a1 *db.Event) (uint, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Event) (uint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *db.Event) uint); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *db.Event) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockDB_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *db.Event
func (_e *MockDB_Expecter) CreateEvent(_a0 interface{}, _a1 interface{}) *MockDB_CreateEvent_Call {
	return &MockDB_CreateEvent_Call{Call: _e.mock.On("CreateEvent", _a0, _a1)}
}

func (_c *MockDB_CreateEvent_Call) Run(run func(_a0 context.Context, _a1 *db.Event)) *MockDB_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*db.Event))
	})
	return _c
}

func (_c *MockDB_CreateEvent_Call) Return(_a0 uint, _a1 error) *MockDB_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_CreateEvent_Call) RunAndReturn(run func(context.Context, *db.Event) (uint, error)) *MockDB_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function with given fields: _a0, _a1
func (_m *MockDB) GetEvent(_a0 context.Context, _a1 uint64) (*db.Event, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 *db.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*db.Event, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *db.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type MockDB_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *MockDB_Expecter) GetEvent(_a0 interface{}, _a1 interface{}) *MockDB_GetEvent_Call {
	return &MockDB_GetEvent_Call{Call: _e.mock.On("GetEvent", _a0, _a1)}
}

func (_c *MockDB_GetEvent_Call) Run(run func(_a0 context.Context, _a1 uint64)) *MockDB_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockDB_GetEvent_Call) Return(_a0 *db.Event, _a1 error) *MockDB_GetEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetEvent_Call) RunAndReturn(run func(context.Context, uint64) (*db.Event, error)) *MockDB_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with given fields: _a0
func (_m *MockDB) GetEvents(_a0 context.Context) ([]*db.Event, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []*db.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*db.Event, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*db.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockDB_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockDB_Expecter) GetEvents(_a0 interface{}) *MockDB_GetEvents_Call {
	return &MockDB_GetEvents_Call{Call: _e.mock.On("GetEvents", _a0)}
}

func (_c *MockDB_GetEvents_Call) Run(run func(_a0 context.Context)) *MockDB_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDB_GetEvents_Call) Return(_a0 []*db.Event, _a1 error) *MockDB_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetEvents_Call) RunAndReturn(run func(context.Context) ([]*db.Event, error)) *MockDB_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileInfo provides a mock function with given fields: _a0, _a1
func (_m *MockDB) GetFileInfo(_a0 context.Context, _a1 string) (*db.FileInfo, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetFileInfo")
	}

	var r0 *db.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.FileInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.FileInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileInfo'
type MockDB_GetFileInfo_Call struct {
	*mock.Call
}

// GetFileInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockDB_Expecter) GetFileInfo(_a0 interface{}, _a1 interface{}) *MockDB_GetFileInfo_Call {
	return &MockDB_GetFileInfo_Call{Call: _e.mock.On("GetFileInfo", _a0, _a1)}
}

func (_c *MockDB_GetFileInfo_Call) Run(run func(_a0 context.Context, _a1 string)) *MockDB_GetFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDB_GetFileInfo_Call) Return(_a0 *db.FileInfo, _a1 error) *MockDB_GetFileInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetFileInfo_Call) RunAndReturn(run func(context.Context, string) (*db.FileInfo, error)) *MockDB_GetFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnailInfo provides a mock function with given fields: _a0, _a1
func (_m *MockDB) GetThumbnailInfo(_a0 context.Context, _a1 string) (*db.ThumbnailInfo, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnailInfo")
	}

	var r0 *db.ThumbnailInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.ThumbnailInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.ThumbnailInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ThumbnailInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetThumbnailInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnailInfo'
type MockDB_GetThumbnailInfo_Call struct {
	*mock.Call
}

// GetThumbnailInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockDB_Expecter) GetThumbnailInfo(_a0 interface{}, _a1 interface{}) *MockDB_GetThumbnailInfo_Call {
	return &MockDB_GetThumbnailInfo_Call{Call: _e.mock.On("GetThumbnailInfo", _a0, _a1)}
}

func (_c *MockDB_GetThumbnailInfo_Call) Run(run func(_a0 context.Context, _a1 string)) *MockDB_GetThumbnailInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDB_GetThumbnailInfo_Call) Return(_a0 *db.ThumbnailInfo, _a1 error) *MockDB_GetThumbnailInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetThumbnailInfo_Call) RunAndReturn(run func(context.Context, string) (*db.ThumbnailInfo, error)) *MockDB_GetThumbnailInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnails provides a mock function with given fields: ctx, eventId, limit, offset
func (_m *MockDB) GetThumbnails(ctx context.Context, eventId uint, limit int, offset int) ([]*db.ThumbnailInfo, error) {
	ret := _m.Called(ctx, eventId, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnails")
	}

	var r0 []*db.ThumbnailInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, int, int) ([]*db.ThumbnailInfo, error)); ok {
		return rf(ctx, eventId, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, int, int) []*db.ThumbnailInfo); ok {
		r0 = rf(ctx, eventId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.ThumbnailInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, int, int) error); ok {
		r1 = rf(ctx, eventId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetThumbnails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnails'
type MockDB_GetThumbnails_Call struct {
	*mock.Call
}

// GetThumbnails is a helper method to define mock.On call
//   - ctx context.Context
//   - eventId uint
//   - limit int
//   - offset int
func (_e *MockDB_Expecter) GetThumbnails(ctx interface{}, eventId interface{}, limit interface{}, offset interface{}) *MockDB_GetThumbnails_Call {
	return &MockDB_GetThumbnails_Call{Call: _e.mock.On("GetThumbnails", ctx, eventId, limit, offset)}
}

func (_c *MockDB_GetThumbnails_Call) Run(run func(ctx context.Context, eventId uint, limit int, offset int)) *MockDB_GetThumbnails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockDB_GetThumbnails_Call) Return(_a0 []*db.ThumbnailInfo, _a1 error) *MockDB_GetThumbnails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetThumbnails_Call) RunAndReturn(run func(context.Context, uint, int, int) ([]*db.ThumbnailInfo, error)) *MockDB_GetThumbnails_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
