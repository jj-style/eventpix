// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/jj-style/eventpix/backend/internal/config"
	"github.com/jj-style/eventpix/backend/internal/data/db"
	"github.com/jj-style/eventpix/backend/internal/dependencies"
	"github.com/jj-style/eventpix/backend/internal/pkg/thumber"
	"github.com/jj-style/eventpix/backend/internal/server"
	"github.com/jj-style/eventpix/backend/internal/service"
	"go.uber.org/zap"
	"net/http"
)

// Injectors from wire.go:

func initializeServer(cfg2 *config.Config, logger *zap.Logger) (*http.Server, func(), error) {
	database := config.DatabaseProvider(cfg2)
	dbDB, cleanup, err := db.NewDb(database, logger)
	if err != nil {
		return nil, nil, err
	}
	nats := config.NatsProvider(cfg2)
	conn, cleanup2, err := dependencies.NatsProvider(nats)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	pictureServiceHandler := service.NewPictureServiceServer(logger, dbDB, conn)
	httpServer := server.NewServer(cfg2, pictureServiceHandler, logger)
	return httpServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

func initializeThumbnailer(cfg2 *config.Config, logger *zap.Logger) (*service.Thumbnailer, func(), error) {
	database := config.DatabaseProvider(cfg2)
	dbDB, cleanup, err := db.NewDb(database, logger)
	if err != nil {
		return nil, nil, err
	}
	nats := config.NatsProvider(cfg2)
	conn, cleanup2, err := dependencies.NatsProvider(nats)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	thumberThumber := thumber.NewThumber()
	thumbnailer, err := service.NewThumbnailer(dbDB, conn, thumberThumber, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return thumbnailer, func() {
		cleanup2()
		cleanup()
	}, nil
}
