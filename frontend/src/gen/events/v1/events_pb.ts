// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file events/v1/events.proto (package events.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Message emitted when a new photo is created
 *
 * @generated from message events.v1.NewPhoto
 */
export class NewPhoto extends Message<NewPhoto> {
  /**
   * Identifier of the event the photo was created in
   *
   * @generated from field: uint64 event_id = 1;
   */
  eventId = protoInt64.zero;

  /**
   * Name of the photo
   *
   * @generated from field: string filename = 2;
   */
  filename = "";

  constructor(data?: PartialMessage<NewPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "events.v1.NewPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewPhoto {
    return new NewPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewPhoto {
    return new NewPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewPhoto {
    return new NewPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: NewPhoto | PlainMessage<NewPhoto> | undefined, b: NewPhoto | PlainMessage<NewPhoto> | undefined): boolean {
    return proto3.util.equals(NewPhoto, a, b);
  }
}

