// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file picture/v1/picture.proto (package picture.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Filesystem } from "./storage_pb.ts";

/**
 * Message representing an event
 *
 * @generated from message picture.v1.Event
 */
export class Event extends Message<Event> {
  /**
   * Identifier of the event
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Name of the event
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Whether the event is live
   *
   * @generated from field: bool live = 3;
   */
  live = false;

  /**
   * File infos in the event
   *
   * @generated from field: picture.v1.FileInfosValue file_infos = 4;
   */
  fileInfos?: FileInfosValue;

  /**
   * Storage for the event
   *
   * @generated from oneof picture.v1.Event.storage
   */
  storage: {
    /**
     * @generated from field: picture.v1.Filesystem filesystem = 5;
     */
    value: Filesystem;
    case: "filesystem";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "live", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "file_infos", kind: "message", T: FileInfosValue },
    { no: 5, name: "filesystem", kind: "message", T: Filesystem, oneof: "storage" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * Wrapper around a list of FileInfo
 *
 * @generated from message picture.v1.FileInfosValue
 */
export class FileInfosValue extends Message<FileInfosValue> {
  /**
   * @generated from field: repeated picture.v1.FileInfo value = 1;
   */
  value: FileInfo[] = [];

  constructor(data?: PartialMessage<FileInfosValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.FileInfosValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: FileInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileInfosValue {
    return new FileInfosValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileInfosValue {
    return new FileInfosValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileInfosValue {
    return new FileInfosValue().fromJsonString(jsonString, options);
  }

  static equals(a: FileInfosValue | PlainMessage<FileInfosValue> | undefined, b: FileInfosValue | PlainMessage<FileInfosValue> | undefined): boolean {
    return proto3.util.equals(FileInfosValue, a, b);
  }
}

/**
 * Message representing file information
 *
 * @generated from message picture.v1.FileInfo
 */
export class FileInfo extends Message<FileInfo> {
  /**
   * Name of the file stored
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<FileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.FileInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileInfo {
    return new FileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FileInfo | PlainMessage<FileInfo> | undefined, b: FileInfo | PlainMessage<FileInfo> | undefined): boolean {
    return proto3.util.equals(FileInfo, a, b);
  }
}

/**
 * Create an event where photos will be taken and associated with
 *
 * @generated from message picture.v1.CreateEventRequest
 */
export class CreateEventRequest extends Message<CreateEventRequest> {
  /**
   * Name of the event
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Whether the event is live
   *
   * @generated from field: bool live = 2;
   */
  live = false;

  /**
   * Storage for the event
   *
   * @generated from oneof picture.v1.CreateEventRequest.storage
   */
  storage: {
    /**
     * @generated from field: picture.v1.Filesystem filesystem = 3;
     */
    value: Filesystem;
    case: "filesystem";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.CreateEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "live", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "filesystem", kind: "message", T: Filesystem, oneof: "storage" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined, b: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined): boolean {
    return proto3.util.equals(CreateEventRequest, a, b);
  }
}

/**
 * Response from successfully creating an event
 *
 * @generated from message picture.v1.CreateEventResponse
 */
export class CreateEventResponse extends Message<CreateEventResponse> {
  /**
   * Identifier of the event created
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<CreateEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.CreateEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventResponse | PlainMessage<CreateEventResponse> | undefined, b: CreateEventResponse | PlainMessage<CreateEventResponse> | undefined): boolean {
    return proto3.util.equals(CreateEventResponse, a, b);
  }
}

/**
 * Message to query available events
 *
 * @generated from message picture.v1.GetEventsRequest
 */
export class GetEventsRequest extends Message<GetEventsRequest> {
  constructor(data?: PartialMessage<GetEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.GetEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsRequest {
    return new GetEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsRequest {
    return new GetEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsRequest {
    return new GetEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventsRequest | PlainMessage<GetEventsRequest> | undefined, b: GetEventsRequest | PlainMessage<GetEventsRequest> | undefined): boolean {
    return proto3.util.equals(GetEventsRequest, a, b);
  }
}

/**
 * Message containings events queries
 *
 * @generated from message picture.v1.GetEventsResponse
 */
export class GetEventsResponse extends Message<GetEventsResponse> {
  /**
   * List of events
   *
   * @generated from field: repeated picture.v1.Event events = 1;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<GetEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.GetEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventsResponse | PlainMessage<GetEventsResponse> | undefined, b: GetEventsResponse | PlainMessage<GetEventsResponse> | undefined): boolean {
    return proto3.util.equals(GetEventsResponse, a, b);
  }
}

/**
 *
 *
 * @generated from message picture.v1.GetEventRequest
 */
export class GetEventRequest extends Message<GetEventRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.GetEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventRequest {
    return new GetEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventRequest | PlainMessage<GetEventRequest> | undefined, b: GetEventRequest | PlainMessage<GetEventRequest> | undefined): boolean {
    return proto3.util.equals(GetEventRequest, a, b);
  }
}

/**
 * @generated from message picture.v1.GetEventResponse
 */
export class GetEventResponse extends Message<GetEventResponse> {
  /**
   * @generated from field: picture.v1.Event event = 1;
   */
  event?: Event;

  constructor(data?: PartialMessage<GetEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.GetEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: Event },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventResponse {
    return new GetEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventResponse {
    return new GetEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventResponse {
    return new GetEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventResponse | PlainMessage<GetEventResponse> | undefined, b: GetEventResponse | PlainMessage<GetEventResponse> | undefined): boolean {
    return proto3.util.equals(GetEventResponse, a, b);
  }
}

/**
 * Message to upload a file to an event
 *
 * @generated from message picture.v1.UploadRequest
 */
export class UploadRequest extends Message<UploadRequest> {
  /**
   * Event the file is a part of
   *
   * @generated from field: uint64 event_id = 1;
   */
  eventId = protoInt64.zero;

  /**
   * The file to upload
   *
   * @generated from field: picture.v1.File file = 2;
   */
  file?: File;

  constructor(data?: PartialMessage<UploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.UploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "file", kind: "message", T: File },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadRequest {
    return new UploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadRequest | PlainMessage<UploadRequest> | undefined, b: UploadRequest | PlainMessage<UploadRequest> | undefined): boolean {
    return proto3.util.equals(UploadRequest, a, b);
  }
}

/**
 * File to upload
 *
 * @generated from message picture.v1.File
 */
export class File extends Message<File> {
  /**
   * The name of the file
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The files data in bytes
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message picture.v1.UploadResponse
 */
export class UploadResponse extends Message<UploadResponse> {
  constructor(data?: PartialMessage<UploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "picture.v1.UploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadResponse {
    return new UploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadResponse | PlainMessage<UploadResponse> | undefined, b: UploadResponse | PlainMessage<UploadResponse> | undefined): boolean {
    return proto3.util.equals(UploadResponse, a, b);
  }
}

