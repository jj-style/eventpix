// Code generated by mockery. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStorageService is an autogenerated mock type for the StorageService type
type MockStorageService struct {
	mock.Mock
}

type MockStorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageService) EXPECT() *MockStorageService_Expecter {
	return &MockStorageService_Expecter{mock: &_m.Mock}
}

// GetPicture provides a mock function with given fields: ctx, id
func (_m *MockStorageService) GetPicture(ctx context.Context, id string) (string, []byte, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPicture")
	}

	var r0 string
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, []byte, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockStorageService_GetPicture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPicture'
type MockStorageService_GetPicture_Call struct {
	*mock.Call
}

// GetPicture is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorageService_Expecter) GetPicture(ctx interface{}, id interface{}) *MockStorageService_GetPicture_Call {
	return &MockStorageService_GetPicture_Call{Call: _e.mock.On("GetPicture", ctx, id)}
}

func (_c *MockStorageService_GetPicture_Call) Run(run func(ctx context.Context, id string)) *MockStorageService_GetPicture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageService_GetPicture_Call) Return(_a0 string, _a1 []byte, _a2 error) *MockStorageService_GetPicture_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockStorageService_GetPicture_Call) RunAndReturn(run func(context.Context, string) (string, []byte, error)) *MockStorageService_GetPicture_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnail provides a mock function with given fields: ctx, id
func (_m *MockStorageService) GetThumbnail(ctx context.Context, id string) (string, []byte, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnail")
	}

	var r0 string
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, []byte, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockStorageService_GetThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnail'
type MockStorageService_GetThumbnail_Call struct {
	*mock.Call
}

// GetThumbnail is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorageService_Expecter) GetThumbnail(ctx interface{}, id interface{}) *MockStorageService_GetThumbnail_Call {
	return &MockStorageService_GetThumbnail_Call{Call: _e.mock.On("GetThumbnail", ctx, id)}
}

func (_c *MockStorageService_GetThumbnail_Call) Run(run func(ctx context.Context, id string)) *MockStorageService_GetThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageService_GetThumbnail_Call) Return(_a0 string, _a1 []byte, _a2 error) *MockStorageService_GetThumbnail_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockStorageService_GetThumbnail_Call) RunAndReturn(run func(context.Context, string) (string, []byte, error)) *MockStorageService_GetThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageService creates a new instance of MockStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageService {
	mock := &MockStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
