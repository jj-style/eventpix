// Code generated by mockery v2.42.0. DO NOT EDIT.

package service

import (
	context "context"
	io "io"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	picturev1 "github.com/jj-style/eventpix/internal/gen/picture/v1"
)

// MockEventpixService is an autogenerated mock type for the EventpixService type
type MockEventpixService struct {
	mock.Mock
}

type MockEventpixService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventpixService) EXPECT() *MockEventpixService_Expecter {
	return &MockEventpixService_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventpixService) CreateEvent(_a0 context.Context, _a1 uint, _a2 *picturev1.CreateEventRequest) (*picturev1.CreateEventResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 *picturev1.CreateEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *picturev1.CreateEventRequest) (*picturev1.CreateEventResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *picturev1.CreateEventRequest) *picturev1.CreateEventResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*picturev1.CreateEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *picturev1.CreateEventRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventpixService_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockEventpixService_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint
//   - _a2 *picturev1.CreateEventRequest
func (_e *MockEventpixService_Expecter) CreateEvent(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockEventpixService_CreateEvent_Call {
	return &MockEventpixService_CreateEvent_Call{Call: _e.mock.On("CreateEvent", _a0, _a1, _a2)}
}

func (_c *MockEventpixService_CreateEvent_Call) Run(run func(_a0 context.Context, _a1 uint, _a2 *picturev1.CreateEventRequest)) *MockEventpixService_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(*picturev1.CreateEventRequest))
	})
	return _c
}

func (_c *MockEventpixService_CreateEvent_Call) Return(_a0 *picturev1.CreateEventResponse, _a1 error) *MockEventpixService_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventpixService_CreateEvent_Call) RunAndReturn(run func(context.Context, uint, *picturev1.CreateEventRequest) (*picturev1.CreateEventResponse, error)) *MockEventpixService_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvent provides a mock function with given fields: _a0, _a1
func (_m *MockEventpixService) DeleteEvent(_a0 context.Context, _a1 *picturev1.DeleteEventRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.DeleteEventRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.DeleteEventRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *picturev1.DeleteEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventpixService_DeleteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvent'
type MockEventpixService_DeleteEvent_Call struct {
	*mock.Call
}

// DeleteEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *picturev1.DeleteEventRequest
func (_e *MockEventpixService_Expecter) DeleteEvent(_a0 interface{}, _a1 interface{}) *MockEventpixService_DeleteEvent_Call {
	return &MockEventpixService_DeleteEvent_Call{Call: _e.mock.On("DeleteEvent", _a0, _a1)}
}

func (_c *MockEventpixService_DeleteEvent_Call) Run(run func(_a0 context.Context, _a1 *picturev1.DeleteEventRequest)) *MockEventpixService_DeleteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*picturev1.DeleteEventRequest))
	})
	return _c
}

func (_c *MockEventpixService_DeleteEvent_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockEventpixService_DeleteEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventpixService_DeleteEvent_Call) RunAndReturn(run func(context.Context, *picturev1.DeleteEventRequest) (*emptypb.Empty, error)) *MockEventpixService_DeleteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function with given fields: _a0, _a1
func (_m *MockEventpixService) GetEvent(_a0 context.Context, _a1 *picturev1.GetEventRequest) (*picturev1.GetEventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 *picturev1.GetEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.GetEventRequest) (*picturev1.GetEventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.GetEventRequest) *picturev1.GetEventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*picturev1.GetEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *picturev1.GetEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventpixService_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type MockEventpixService_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *picturev1.GetEventRequest
func (_e *MockEventpixService_Expecter) GetEvent(_a0 interface{}, _a1 interface{}) *MockEventpixService_GetEvent_Call {
	return &MockEventpixService_GetEvent_Call{Call: _e.mock.On("GetEvent", _a0, _a1)}
}

func (_c *MockEventpixService_GetEvent_Call) Run(run func(_a0 context.Context, _a1 *picturev1.GetEventRequest)) *MockEventpixService_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*picturev1.GetEventRequest))
	})
	return _c
}

func (_c *MockEventpixService_GetEvent_Call) Return(_a0 *picturev1.GetEventResponse, _a1 error) *MockEventpixService_GetEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventpixService_GetEvent_Call) RunAndReturn(run func(context.Context, *picturev1.GetEventRequest) (*picturev1.GetEventResponse, error)) *MockEventpixService_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventpixService) GetEvents(_a0 context.Context, _a1 *picturev1.GetEventsRequest, _a2 uint) (*picturev1.GetEventsResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 *picturev1.GetEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.GetEventsRequest, uint) (*picturev1.GetEventsResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.GetEventsRequest, uint) *picturev1.GetEventsResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*picturev1.GetEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *picturev1.GetEventsRequest, uint) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventpixService_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockEventpixService_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *picturev1.GetEventsRequest
//   - _a2 uint
func (_e *MockEventpixService_Expecter) GetEvents(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockEventpixService_GetEvents_Call {
	return &MockEventpixService_GetEvents_Call{Call: _e.mock.On("GetEvents", _a0, _a1, _a2)}
}

func (_c *MockEventpixService_GetEvents_Call) Run(run func(_a0 context.Context, _a1 *picturev1.GetEventsRequest, _a2 uint)) *MockEventpixService_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*picturev1.GetEventsRequest), args[2].(uint))
	})
	return _c
}

func (_c *MockEventpixService_GetEvents_Call) Return(_a0 *picturev1.GetEventsResponse, _a1 error) *MockEventpixService_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventpixService_GetEvents_Call) RunAndReturn(run func(context.Context, *picturev1.GetEventsRequest, uint) (*picturev1.GetEventsResponse, error)) *MockEventpixService_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnailInfo provides a mock function with given fields: _a0, _a1
func (_m *MockEventpixService) GetThumbnailInfo(_a0 context.Context, _a1 string) (*picturev1.Thumbnail, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnailInfo")
	}

	var r0 *picturev1.Thumbnail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*picturev1.Thumbnail, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *picturev1.Thumbnail); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*picturev1.Thumbnail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventpixService_GetThumbnailInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnailInfo'
type MockEventpixService_GetThumbnailInfo_Call struct {
	*mock.Call
}

// GetThumbnailInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockEventpixService_Expecter) GetThumbnailInfo(_a0 interface{}, _a1 interface{}) *MockEventpixService_GetThumbnailInfo_Call {
	return &MockEventpixService_GetThumbnailInfo_Call{Call: _e.mock.On("GetThumbnailInfo", _a0, _a1)}
}

func (_c *MockEventpixService_GetThumbnailInfo_Call) Run(run func(_a0 context.Context, _a1 string)) *MockEventpixService_GetThumbnailInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEventpixService_GetThumbnailInfo_Call) Return(_a0 *picturev1.Thumbnail, _a1 error) *MockEventpixService_GetThumbnailInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventpixService_GetThumbnailInfo_Call) RunAndReturn(run func(context.Context, string) (*picturev1.Thumbnail, error)) *MockEventpixService_GetThumbnailInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnails provides a mock function with given fields: _a0, _a1
func (_m *MockEventpixService) GetThumbnails(_a0 context.Context, _a1 *picturev1.GetThumbnailsRequest) (*picturev1.GetThumbnailsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnails")
	}

	var r0 *picturev1.GetThumbnailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.GetThumbnailsRequest) (*picturev1.GetThumbnailsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.GetThumbnailsRequest) *picturev1.GetThumbnailsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*picturev1.GetThumbnailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *picturev1.GetThumbnailsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventpixService_GetThumbnails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnails'
type MockEventpixService_GetThumbnails_Call struct {
	*mock.Call
}

// GetThumbnails is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *picturev1.GetThumbnailsRequest
func (_e *MockEventpixService_Expecter) GetThumbnails(_a0 interface{}, _a1 interface{}) *MockEventpixService_GetThumbnails_Call {
	return &MockEventpixService_GetThumbnails_Call{Call: _e.mock.On("GetThumbnails", _a0, _a1)}
}

func (_c *MockEventpixService_GetThumbnails_Call) Run(run func(_a0 context.Context, _a1 *picturev1.GetThumbnailsRequest)) *MockEventpixService_GetThumbnails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*picturev1.GetThumbnailsRequest))
	})
	return _c
}

func (_c *MockEventpixService_GetThumbnails_Call) Return(_a0 *picturev1.GetThumbnailsResponse, _a1 error) *MockEventpixService_GetThumbnails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventpixService_GetThumbnails_Call) RunAndReturn(run func(context.Context, *picturev1.GetThumbnailsRequest) (*picturev1.GetThumbnailsResponse, error)) *MockEventpixService_GetThumbnails_Call {
	_c.Call.Return(run)
	return _c
}

// SetEventLive provides a mock function with given fields: _a0, _a1
func (_m *MockEventpixService) SetEventLive(_a0 context.Context, _a1 *picturev1.SetEventLiveRequest) (*picturev1.SetEventLiveResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetEventLive")
	}

	var r0 *picturev1.SetEventLiveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.SetEventLiveRequest) (*picturev1.SetEventLiveResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *picturev1.SetEventLiveRequest) *picturev1.SetEventLiveResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*picturev1.SetEventLiveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *picturev1.SetEventLiveRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventpixService_SetEventLive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEventLive'
type MockEventpixService_SetEventLive_Call struct {
	*mock.Call
}

// SetEventLive is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *picturev1.SetEventLiveRequest
func (_e *MockEventpixService_Expecter) SetEventLive(_a0 interface{}, _a1 interface{}) *MockEventpixService_SetEventLive_Call {
	return &MockEventpixService_SetEventLive_Call{Call: _e.mock.On("SetEventLive", _a0, _a1)}
}

func (_c *MockEventpixService_SetEventLive_Call) Run(run func(_a0 context.Context, _a1 *picturev1.SetEventLiveRequest)) *MockEventpixService_SetEventLive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*picturev1.SetEventLiveRequest))
	})
	return _c
}

func (_c *MockEventpixService_SetEventLive_Call) Return(_a0 *picturev1.SetEventLiveResponse, _a1 error) *MockEventpixService_SetEventLive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventpixService_SetEventLive_Call) RunAndReturn(run func(context.Context, *picturev1.SetEventLiveRequest) (*picturev1.SetEventLiveResponse, error)) *MockEventpixService_SetEventLive_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockEventpixService) Upload(_a0 context.Context, _a1 uint64, _a2 string, _a3 io.Reader, _a4 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, io.Reader, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventpixService_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockEventpixService_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
//   - _a2 string
//   - _a3 io.Reader
//   - _a4 string
func (_e *MockEventpixService_Expecter) Upload(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockEventpixService_Upload_Call {
	return &MockEventpixService_Upload_Call{Call: _e.mock.On("Upload", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockEventpixService_Upload_Call) Run(run func(_a0 context.Context, _a1 uint64, _a2 string, _a3 io.Reader, _a4 string)) *MockEventpixService_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string), args[3].(io.Reader), args[4].(string))
	})
	return _c
}

func (_c *MockEventpixService_Upload_Call) Return(_a0 error) *MockEventpixService_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventpixService_Upload_Call) RunAndReturn(run func(context.Context, uint64, string, io.Reader, string) error) *MockEventpixService_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventpixService creates a new instance of MockEventpixService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventpixService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventpixService {
	mock := &MockEventpixService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
