// Code generated by mockery. DO NOT EDIT.

package imagor

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockImagor is an autogenerated mock type for the Imagor type
type MockImagor struct {
	mock.Mock
}

type MockImagor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImagor) EXPECT() *MockImagor_Expecter {
	return &MockImagor_Expecter{mock: &_m.Mock}
}

// ThumbImage provides a mock function with given fields: imgUrl
func (_m *MockImagor) ThumbImage(imgUrl string) (io.ReadCloser, error) {
	ret := _m.Called(imgUrl)

	if len(ret) == 0 {
		panic("no return value specified for ThumbImage")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(imgUrl)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(imgUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imgUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImagor_ThumbImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ThumbImage'
type MockImagor_ThumbImage_Call struct {
	*mock.Call
}

// ThumbImage is a helper method to define mock.On call
//   - imgUrl string
func (_e *MockImagor_Expecter) ThumbImage(imgUrl interface{}) *MockImagor_ThumbImage_Call {
	return &MockImagor_ThumbImage_Call{Call: _e.mock.On("ThumbImage", imgUrl)}
}

func (_c *MockImagor_ThumbImage_Call) Run(run func(imgUrl string)) *MockImagor_ThumbImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockImagor_ThumbImage_Call) Return(_a0 io.ReadCloser, _a1 error) *MockImagor_ThumbImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImagor_ThumbImage_Call) RunAndReturn(run func(string) (io.ReadCloser, error)) *MockImagor_ThumbImage_Call {
	_c.Call.Return(run)
	return _c
}

// ThumbVideo provides a mock function with given fields: videoUrl
func (_m *MockImagor) ThumbVideo(videoUrl string) (io.ReadCloser, error) {
	ret := _m.Called(videoUrl)

	if len(ret) == 0 {
		panic("no return value specified for ThumbVideo")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(videoUrl)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(videoUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(videoUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImagor_ThumbVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ThumbVideo'
type MockImagor_ThumbVideo_Call struct {
	*mock.Call
}

// ThumbVideo is a helper method to define mock.On call
//   - videoUrl string
func (_e *MockImagor_Expecter) ThumbVideo(videoUrl interface{}) *MockImagor_ThumbVideo_Call {
	return &MockImagor_ThumbVideo_Call{Call: _e.mock.On("ThumbVideo", videoUrl)}
}

func (_c *MockImagor_ThumbVideo_Call) Run(run func(videoUrl string)) *MockImagor_ThumbVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockImagor_ThumbVideo_Call) Return(_a0 io.ReadCloser, _a1 error) *MockImagor_ThumbVideo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImagor_ThumbVideo_Call) RunAndReturn(run func(string) (io.ReadCloser, error)) *MockImagor_ThumbVideo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImagor creates a new instance of MockImagor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImagor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImagor {
	mock := &MockImagor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
