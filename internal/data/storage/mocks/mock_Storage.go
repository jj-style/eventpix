// Code generated by mockery v2.42.0. DO NOT EDIT.

package storage

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) Get(_a0 context.Context, _a1 string) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockStorage_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockStorage_Get_Call) Run(run func(_a0 context.Context, _a1 string)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(_a0 io.ReadCloser, _a1 error) *MockStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(context.Context, string) (io.ReadCloser, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStorage) Store(_a0 context.Context, _a1 string, _a2 io.Reader) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) (string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockStorage_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 io.Reader
func (_e *MockStorage_Expecter) Store(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStorage_Store_Call {
	return &MockStorage_Store_Call{Call: _e.mock.On("Store", _a0, _a1, _a2)}
}

func (_c *MockStorage_Store_Call) Run(run func(_a0 context.Context, _a1 string, _a2 io.Reader)) *MockStorage_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *MockStorage_Store_Call) Return(_a0 string, _a1 error) *MockStorage_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Store_Call) RunAndReturn(run func(context.Context, string, io.Reader) (string, error)) *MockStorage_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
