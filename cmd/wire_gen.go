// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/eko/gocache/lib/v4/cache"
	"github.com/jj-style/eventpix/internal/config"
	"github.com/jj-style/eventpix/internal/data/db"
	"github.com/jj-style/eventpix/internal/pkg/imagor"
	"github.com/jj-style/eventpix/internal/pkg/validate"
	"github.com/jj-style/eventpix/internal/server"
	"github.com/jj-style/eventpix/internal/service"
	"github.com/nats-io/nats.go"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func initializeServer(cfg2 *config.Config, logger *zap.Logger) (*serverApp, func(), error) {
	nats := config.NatsProvider(cfg2)
	conn, cleanup, err := newNats(nats)
	if err != nil {
		return nil, nil, err
	}
	htmx := newHtmx()
	database := config.DatabaseProvider(cfg2)
	oauth2Config, err := newGoogleDriveConfig(cfg2)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dbDB, cleanup2, err := db.NewDb(database, logger, oauth2Config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cache := config.CacheProvider(cfg2)
	cacheInterface, err := newCache(cache)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	storageService := service.NewStorageService(dbDB, logger, cacheInterface)
	authService := service.NewAuthService(cfg2, dbDB, htmx)
	validator := validate.NewValidator()
	eventpixService := service.NewEventpixService(logger, dbDB, conn, validator, cacheInterface)
	httpServer := server.NewHttpServer(cfg2, htmx, storageService, authService, eventpixService, dbDB, conn, logger, oauth2Config, validator)
	cmdServerApp, cleanup3, err := newServerApp(cfg2, logger, conn, httpServer, cacheInterface)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return cmdServerApp, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func initializeThumbnailer(cfg2 *config.Config, logger *zap.Logger) (*service.Thumbnailer, func(), error) {
	database := config.DatabaseProvider(cfg2)
	oauth2Config, err := newGoogleDriveConfig(cfg2)
	if err != nil {
		return nil, nil, err
	}
	dbDB, cleanup, err := db.NewDb(database, logger, oauth2Config)
	if err != nil {
		return nil, nil, err
	}
	imagorImagor := imagor.NewImagor(cfg2)
	nats := config.NatsProvider(cfg2)
	conn, cleanup2, err := newNats(nats)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cache := config.CacheProvider(cfg2)
	cacheInterface, err := newCache(cache)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	thumbnailer, err := service.NewThumbnailer(cfg2, dbDB, imagorImagor, conn, logger, cacheInterface)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return thumbnailer, func() {
		cleanup2()
		cleanup()
	}, nil
}

func initializeThumbnailerInProc(cfg2 *config.Config, logger *zap.Logger, nc *nats.Conn, cache2 cache.CacheInterface[[]byte]) (*service.Thumbnailer, func(), error) {
	database := config.DatabaseProvider(cfg2)
	oauth2Config, err := newGoogleDriveConfig(cfg2)
	if err != nil {
		return nil, nil, err
	}
	dbDB, cleanup, err := db.NewDb(database, logger, oauth2Config)
	if err != nil {
		return nil, nil, err
	}
	imagorImagor := imagor.NewImagor(cfg2)
	thumbnailer, err := service.NewThumbnailer(cfg2, dbDB, imagorImagor, nc, logger, cache2)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return thumbnailer, func() {
		cleanup()
	}, nil
}
